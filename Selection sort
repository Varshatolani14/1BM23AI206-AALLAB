#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 100

int binarySearch(int arr[], int left, int right, int target) {
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == target) return mid;
        if (arr[mid] < target) left = mid + 1;
        else right = mid - 1;
    }
    return -1;
}

int main() {
    int arr[SIZE];
    int swap_count = 0;
    srand(time(NULL));

    for (int i = 0; i < SIZE; i++) {
        arr[i] = rand() % 100 + 1;
    }

    clock_t start, end;
    start = clock();

    for (int i = 0; i < SIZE - 1; i++) {
        int min_idx = i;
        for (int j = i + 1; j < SIZE; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        if (min_idx != i) {
            // Swap
            int temp = arr[i];
            arr[i] = arr[min_idx];
            arr[min_idx] = temp;
            swap_count++;
        }
    }

    end = clock();

    printf("Sorted array:\n");
    for (int i = 0; i < SIZE; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    printf("Number of swaps during sorting: %d\n", swap_count);
    printf("Sorting time: %f seconds\n", ((double)(end - start)) / CLOCKS_PER_SEC);

    // Generate a random target
    int target = rand() % 100 + 1;
    printf("Target: %d\n", target);

    // Binary Search
    start = clock();
    int result = binarySearch(arr, 0, SIZE - 1, target);
    end = clock();

    if (result != -1) {
        printf("Number found at index %d\n", result);
    } else {
        printf("Number not found\n");
    }

    printf("Binary search time: %f seconds\n", ((double)(end - start)) / CLOCKS_PER_SEC);

    return 0;
}
