#include <stdlib.h>
 
struct Edge {
    int src, dest, weight;
};

struct subset {
    int parent;
    int rank;
};

int find(struct subset subsets[], int i) {
    if (subsets[i].parent != i) {
        subsets[i].parent = find(subsets, subsets[i].parent);
    }
    return subsets[i].parent;
}

void Union(struct subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);
   
    if (subsets[xroot].rank < subsets[yroot].rank) {
        subsets[xroot].parent = yroot;
    }
    else if (subsets[xroot].rank > subsets[yroot].rank) {
        subsets[yroot].parent = xroot;
    }
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}


int myComp(const void* a, const void* b) {
    struct Edge* a1 = (struct Edge*)a;
    struct Edge* b1 = (struct Edge*)b;
    return a1->weight > b1->weight;
}


void KruskalMST(struct Edge edges[], int V, int E) {
    struct Edge *result = malloc((V - 1) * sizeof(struct Edge));
    int e = 0;  
    int i = 0;  
   
    qsort(edges, E, sizeof(edges[0]), myComp);
   
    struct subset *subsets = malloc(V * sizeof(struct subset));
   
    for (int v = 0; v < V; v++) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }
   
    while (e < V - 1 && i < E) {
        struct Edge next_edge = edges[i++];
       
        int x = find(subsets, next_edge.src);
        int y = find(subsets, next_edge.dest);
       
        if (x != y) {
            result[e++] = next_edge;
            Union(subsets, x, y);
        }
    }
   
    int tc = 0;
    printf("Kruskal's Minimum Spanning Tree:\n");
    printf("Edge \tWeight\n");
    for (i = 0; i < e; i++) {
        printf("%d - %d \t%d \n", result[i].src, result[i].dest, result[i].weight);
        tc += result[i].weight;
    }
   
    printf("Total cost : %d", tc);
    free(result);
    free(subsets);
}

int main() {
    int V, E;
   
    printf("Enter number of vertices: ");
    scanf("%d", &V);
   
    printf("Enter number of edges: ");
    scanf("%d", &E);
   
    struct Edge *edges = malloc(E * sizeof(struct Edge));
   
    printf("Enter edges (source destination weight):\n");
    for (int i = 0; i < E; i++) {
        scanf("%d %d %d", &edges[i].src, &edges[i].dest, &edges[i].weight);
    }
   
    KruskalMST(edges, V, E);
   
    free(edges);
    return 0;
}
